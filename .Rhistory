out
}
# Calculate richness indices across years for the study:
richness.across.years = rich.indis(d1)
richness.across.years
}
coreTrans(226,'d226_ew',.33)
coreTrans = function(dataset, site, threshold){
d = d[d$datasetID == dataset & d$site == site,] # Subsets data by dataset & site
sp = unique(d$species)        # Generates a species list
yrs = length(unique(d$year))  # Generates a list of years
# For loop to calculate the proportion of years a species has been observed:
prop.yrs = numeric()
for (i in 1:length(sp)){
prop.yrs[i] = length(unique(d[d$species == sp[i],'year']))/yrs
}
d1 = data.frame(sp,prop.yrs)  # Dataframe of species and proportion of years
# Subset into core and transient:
core.thresh = 1 - threshold   # Threshold for core species
trans.thresh = threshold      # Threshold for transient species
sp.core = d1[d1$prop.yrs>=core.thresh,]
sp.trans = d1[d1$prop.yrs<=trans.thresh,]
# Assign species to core or transient status:
d1$CT = ifelse(df1$prop.yrs>=core.thresh,'core',
ifelse(df1$prop.yrs<=trans.thresh,'transient',NA))
# Function to calculate richness indices and output it as a 1-row dataframe:
rich.indis = function(d, year){
if (year!='all') d = d[d$year == year,]
rich.total = length(d[,1])
rich.core = length(d[d$CT=='core',1])
rich.trans = length(d[d$CT=='trans',1])
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, threshold, rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
# Calculate richness indices across years for the study:
richness.across.years = rich.indis(d1,'all')
richness.across.years
}
coreTrans(226,'d226_ew',.33)
coreTrans = function(dataset, site, threshold){
d = d[d$datasetID == dataset & d$site == site,] # Subsets data by dataset & site
sp = unique(d$species)        # Generates a species list
yrs = length(unique(d$year))  # Generates a list of years
# For loop to calculate the proportion of years a species has been observed:
prop.yrs = numeric()
for (i in 1:length(sp)){
prop.yrs[i] = length(unique(d[d$species == sp[i],'year']))/yrs
}
d1 = data.frame(sp,prop.yrs)  # Dataframe of species and proportion of years
# Subset into core and transient:
core.thresh = 1 - threshold   # Threshold for core species
trans.thresh = threshold      # Threshold for transient species
sp.core = d1[d1$prop.yrs>=core.thresh,]
sp.trans = d1[d1$prop.yrs<=trans.thresh,]
# Assign species to core or transient status:
d1$CT = ifelse(df1$prop.yrs>=core.thresh,'core',
ifelse(df1$prop.yrs<=trans.thresh,'transient',NA))
# Function to calculate richness indices and output it as a 1-row dataframe:
rich.indis = function(d, year){
if (year!='all') d = d[d$year == year,]
rich.total = length(d[,1])
rich.core = length(d[d$CT=='core',1])
rich.trans = length(d[d$CT=='trans',1])
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
# Calculate richness indices across years for the study:
richness.across.years = rich.indis(d1,'all')
richness.across.years
}
coreTrans(226,'d226_ew',.33)
?ddply
head(d1)
head(df1)
d1 = def1
d1 = df1
df1
rich.indis = function(year){
d = d1
if (year!='all') d = d[d$year == year,]
rich.total = length(d[,1])
rich.core = length(d[d$CT=='core',1])
rich.trans = length(d[d$CT=='trans',1])
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
ddply(d1,~yrs,rich.indis)
b = NULL
for(i in 1:length(years)){
b[i,] = rich.indis(years[i])
}
b
b = NULL
for(i in 1:length(yrs)){
b[i,] = rich.indis(yrs[i])
}
b
rich.indis = function(dataset,site,year){
d = d1
if (year!='all') d = d[d$year == year,]
rich.total = length(d[,1])
rich.core = length(d[d$CT=='core',1])
rich.trans = length(d[d$CT=='trans',1])
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
head(d226)
dataset = 226
site = 'd226_ew'
sit
site
for(i in 1:length(yrs)){
b[i,] = rich.indis(dataset, site, yrs[i])
}
threshold
threshold = .33
for(i in 1:length(yrs)){
b[i,] = rich.indis(dataset, site, yrs[i], threshold)
}
rich.indis = function(dataset,site,year, threshold){
d = d1
if (year!='all') d = d[d$year == year,]
rich.total = length(d[,1])
rich.core = length(d[d$CT=='core',1])
rich.trans = length(d[d$CT=='trans',1])
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
for(i in 1:length(yrs)){
b[i,] = rich.indis(dataset, site, yrs[i], threshold)
}
yrs
d = d226
years = sort(unique(d$year))
yrs = length(years)  # Generates a list of years
rich.indis = function(dataset,site,year, threshold){
d = d1
if (year!='all') d = d[d$year == year,]
rich.total = length(d[,1])
rich.core = length(d[d$CT=='core',1])
rich.trans = length(d[d$CT=='trans',1])
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
for(i in 1:length(years)){
b[i,] = rich.indis(dataset, site, years[i], threshold)
}
years[1]
years[2]
b = data.frame()
for(i in 1:length(years)){
b[i,] = rich.indis(dataset, site, years[i], threshold)
}
b
rich.indis(dataset, site, years[1], threshold)
rich.indis(dataset, site, years[2], threshold)
d1
?merge
d
da = merge(d, d1, by.x = 'species', by.y = 'sp')
head(da)
head(da)[,-6]
da = merge(d, d1, by.x = 'species', by.y = 'sp')[,-6]
head(da)
d = merge(d, d1, by.x = 'species', by.y = 'sp')[,-6]
rich.indis = function(dataset,site,year, threshold){
if (year!='all') d = d[d$year == year,]
rich.total = length(d[,1])
rich.core = length(d[d$CT=='core',1])
rich.trans = length(d[d$CT=='trans',1])
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
rich.indis(dataset, site, years[2], threshold)
ddply(d,~years,rich.indis)
ddply(d,~year,rich.indis)
for(i in 1:length(years)){
b[i,] = rich.indis(dataset, site, years[i], threshold)
}
site
dataset
for(i in 1:length(years)){
b[i,] = rich.indis(d, site, years[i], threshold)
}
for(i in 1:length(years)){
b[i,] = rich.indis(dataset, site, years[i], threshold)
}
warnings
b
rich.indis(dataset, site, years[2], threshold)
rich.indis(dataset, site, years[3], threshold)
do.call('rbind',apply(rich.indis(years)))
?do.call
do.call('rbind',rich.indis(years))
do.call('rbind',rich.indis(year))
years
do.call('rbind',rich.indis(years))
# Function to calculate richness indices and output it as a 1-row dataframe:
rich.indis = function(dataset,site,i, threshold){
year = years[i]
if (year!='all') d = d[d$year == year,]
rich.total = length(d[,1])
rich.core = length(d[d$CT=='core',1])
rich.trans = length(d[d$CT=='trans',1])
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
b[i,] = rich.indis(dataset, site, 1, threshold)
for(i in 1:length(years)){
b[i,] = rich.indis(dataset, site, 1, threshold)
}
b
rich.indis(dataset, site, 3, threshold)
do.call('rbind',rich.indis(years))
do.call('rbind',rich.indis(ataset, site, i, threshold))
do.call('rbind',rich.indis(dataset, site, i, threshold))
rich.indis(dataset, site, 3, threshold)
b = NULL
for(i in 1:length(years)){
b = rich.indis(dataset, site, i, threshold)
}
b
b = data.frame()
for(i in 1:length(years)){
b = rich.indis(dataset, site, i, threshold)
}
b
i
length(years)
b = list()
for(i in 1:length(years)){
b[[i]] = rich.indis(dataset, site, i, threshold)
}
b
rbind.fill(b)
for(i in 1:length(years)){
b[[i]] = rich.indis(dataset, site, year[i], threshold)
}
rbind.fill(b)
rich.indis = function(dataset,site,year, threshold){
if (year!='all') d = d[d$year == year,]
rich.total = length(d[,1])
rich.core = length(d[d$CT=='core',1])
rich.trans = length(d[d$CT=='trans',1])
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
for(i in 1:length(years)){
b[[i]] = rich.indis(dataset, site, year[i], threshold)
}
rbind.fill(b)
r.by.yr = list()
for(i in 1:length(years)){
r.by.yr[[i]] = rich.indis(dataset, site, year[i], threshold)
}
rbind.fill(r.by.yr)
r.by.yr = list()
for(i in 1:length(years)){
r.by.yr[[i]] = rich.indis(dataset, site, year[i], threshold)
}
r.by.yr = rbind.fill(r.by.yr)
r.by.yr
head(d)
rich.indis = function(dataset,site,year, threshold){
if (year!='all') d = d[d$year == year,]
rich.total = length(unique(d[,1]))
rich.core = length(unique(d[d$CT=='core',1]))
rich.trans = length(unique(d[d$CT=='trans',1]))
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
richness.across.years = rich.indis(dataset, site, 'all',threshold)
richness.across.years
summary(d)
summary(factor(d$CT))
d
length(unique(d))
length(unique(d[,1]))
richness.across.years = rich.indis(dataset, site, 'all',threshold)
richness.across.years
length(unique(d[d$CT=='core',1]))
length(unique(d[d$CT=='trans',1]))
unique(d[d$CT=='trans',1])
rich.indis = function(dataset,site,year, threshold){
if (year!='all') d = d[d$year == year,]
rich.total = length(unique(d[,1]))
rich.core = length(unique(d[d$CT=='core',1]))
rich.trans = length(unique(d[d$CT=='transient',1]))
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
# Calculate richness indices across years for the study:
richness.across.years = rich.indis(dataset, site, 'all',threshold)
richness.across.years
r.by.yr = list()
for(i in 1:length(years)){
r.by.yr[[i]] = rich.indis(dataset, site, year[i], threshold)
}
r.by.yr = rbind.fill(r.by.yr)
r.by.yr
coreTrans(226,'d226_ew',.33)
coreTrans = function(dataset, site, threshold){
d = d[d$datasetID == dataset & d$site == site,] # Subsets data by dataset & site
sp = unique(d$species)        # Generates a species list
years = sort(unique(d$year))
yrs = length(years)  # Generates a list of years
# For loop to calculate the proportion of years a species has been observed:
prop.yrs = numeric()
for (i in 1:length(sp)){
prop.yrs[i] = length(unique(d[d$species == sp[i],'year']))/yrs
}
d1 = data.frame(sp,prop.yrs)  # Dataframe of species and proportion of years
# Subset into core and transient:
core.thresh = 1 - threshold   # Threshold for core species
trans.thresh = threshold      # Threshold for transient species
sp.core = d1[d1$prop.yrs>=core.thresh,]
sp.trans = d1[d1$prop.yrs<=trans.thresh,]
# Assign species to core or transient status:
d1$CT = ifelse(df1$prop.yrs>=core.thresh,'core',
ifelse(df1$prop.yrs<=trans.thresh,'transient',NA))
# Merge with the original data frame:
d = merge(d, d1, by.x = 'species', by.y = 'sp')[,-6]
# Function to calculate richness indices and output it as a 1-row dataframe:
rich.indis = function(dataset,site,year, threshold){
if (year!='all') d = d[d$year == year,]
rich.total = length(unique(d[,1]))
rich.core = length(unique(d[d$CT=='core',1]))
rich.trans = length(unique(d[d$CT=='transient',1]))
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
# Calculate richness indices across years for the study:
richness.across.years = rich.indis(dataset, site, 'all',threshold)
# Calculate richness indices for each year of the study:
r.by.yr = list()
for(i in 1:length(years)){
r.by.yr[[i]] = rich.indis(dataset, site, year[i], threshold)
}
r.by.yr = rbind.fill(r.by.yr)
# Graphical output:
# Histogram across years
site.histogram = ggplot(d1, aes(x=prop.yrs)) +
geom_histogram(aes(y=..density..), binwidth=.1,
colour="black", fill="gray") +
geom_density(alpha=.2, fill="blue") +
labs(title= 'Proportional density',
x = 'Proportion of years', y = 'Density of species/year') +
theme(axis.text = element_text(size=14, color = 'black'),
axis.title = element_text(size=18),
title = element_text(size=22),
axis.line = element_line(colour = "black"),
panel.background = element_blank())
# Output
list(r.across.years, r.by.yr, site.histogram)
}
coreTrans(226,'d226_ew',.33)[[3]]
coreTrans = function(dataset, site, threshold){
d = d[d$datasetID == dataset & d$site == site,] # Subsets data by dataset & site
sp = unique(d$species)        # Generates a species list
years = sort(unique(d$year))
yrs = length(years)  # Generates a list of years
# For loop to calculate the proportion of years a species has been observed:
prop.yrs = numeric()
for (i in 1:length(sp)){
prop.yrs[i] = length(unique(d[d$species == sp[i],'year']))/yrs
}
d1 = data.frame(sp,prop.yrs)  # Dataframe of species and proportion of years
# Subset into core and transient:
core.thresh = 1 - threshold   # Threshold for core species
trans.thresh = threshold      # Threshold for transient species
sp.core = d1[d1$prop.yrs>=core.thresh,]
sp.trans = d1[d1$prop.yrs<=trans.thresh,]
# Assign species to core or transient status:
d1$CT = ifelse(df1$prop.yrs>=core.thresh,'core',
ifelse(df1$prop.yrs<=trans.thresh,'transient',NA))
# Merge with the original data frame:
d = merge(d, d1, by.x = 'species', by.y = 'sp')[,-6]
# Function to calculate richness indices and output it as a 1-row dataframe:
rich.indis = function(dataset,site,year, threshold){
if (year!='all') d = d[d$year == year,]
rich.total = length(unique(d[,1]))
rich.core = length(unique(d[d$CT=='core',1]))
rich.trans = length(unique(d[d$CT=='transient',1]))
prop.core = rich.core/rich.total
prop.trans = rich.trans/rich.total
out = data.frame(dataset, site, year, threshold,
rich.total, rich.core, rich.trans,
prop.core, prop.trans)
names(out) = c('datasetID','site','year','threshold',
'total_richness','core_richness','trans_richness',
'prop_core','prop_trans')
out
}
# Calculate richness indices across years for the study:
r.across.years = rich.indis(dataset, site, 'all',threshold)
# Calculate richness indices for each year of the study:
r.by.yr = list()
for(i in 1:length(years)){
r.by.yr[[i]] = rich.indis(dataset, site, year[i], threshold)
}
r.by.yr = rbind.fill(r.by.yr)
# Graphical output:
# Histogram across years
site.histogram = ggplot(d1, aes(x=prop.yrs)) +
geom_histogram(aes(y=..density..), binwidth=.1,
colour="black", fill="gray") +
geom_density(alpha=.2, fill="blue") +
labs(title= 'Proportional density',
x = 'Proportion of years', y = 'Density of species/year') +
theme(axis.text = element_text(size=14, color = 'black'),
axis.title = element_text(size=18),
title = element_text(size=22),
axis.line = element_line(colour = "black"),
panel.background = element_blank())
# Output
list(r.across.years, r.by.yr, site.histogram)
}
coreTrans(226,'d226_ew',.33)[[3]]
coreTrans(226,'d226_ew',.33)[[1]]
coreTrans(226,'d226_ew',.33)[[2]]
out.test = coreTrans(226,'d226_ew',.33)[[2]]
out.test = coreTrans(226,'d226_ew',.33)
ggplot(out.test[[2]], aes(x = year, y = prop.core)) + geom_point()
ggplot(out.test[[3]], aes(x = year, y = c(prop.trans)) + geom_point()
ggplot(out.test[[2]], aes(x = year, y = c(prop.trans)) + geom_point()
outtest[[2]]
out.test[[2]]
ggplot(out.test[[2]], aes(x = year, y = prop_core)) + geom_point()
ggplot(out.test[[2]], aes(x = year, y = prop_trans)) + geom_point()
