{
    "contents" : "###################################################################################*\n# ---- CORE-TRANSIENT TABULAR SUMMARY OUTPUT ----\n###################################################################################*  \n# This file is used as a \"dashboard\" to observe / produce tabular summary output \n# from core-transient analyses. Functions are located in the \n# core-transient_functions.R source file.\n\n#----------------------------------------------------------------------------------*\n# ---- Set-up ----\n#==================================================================================*\n\n# Source functions:\n\nsource('scripts/R-Scripts/core-transient_functions.R')\n\n# Get files:\n\noccPropList = paste('data/propOcc_datasets/',\n                    list.files('data/propOcc_datasets'), sep ='')\n\nsiteSummaryList = paste('data/siteSummaries/',\n                    list.files('data/siteSummaries'), sep ='')\n\n#----------------------------------------------------------------------------------*\n# ---- Sampling summary ----\n#==================================================================================*\n  \n# Calculate the summary statistics (all summary data with the exception of\n# bimodality across sites for sites that meet our sampling criteria). Input is \n# the core-transient threshold. \n\nsite = unique(occProp$site)\n# site = site[50:51]\nthreshold = 1/3\nout.list = list()\n\nfor (i in 1:length(site)){\n  out.list[[i]] = summaryStats(site[i], threshold)\n}\n\nss = rbind.fill(out.list)\n\n#----------------------------------------------------------------------------------*\n# ---- Core-transient summary table ----\n#----------------------------------------------------------------------------------*\n# Input is the cut-ff for core- and transient designation and the number of reps\n# used to calculate the p-value. The proportional dataframe must be loaded into the\n# environment above and the sampling summary code above must be run prior to \n# running this script.\n\nsite = factor(samplingSummary$site)\nthreshold = 1/3\nreps = 1000\n\nout.list = list()\n\nfor (i in 1:length(site)){\n  tryCatch({\n    out.list[[i]] =  ctSummary(site[i], threshold, reps)\n  }, error=function(e){\n    cat('ERROR for site',site[i],':', conditionMessage(e), '\\n')\n    })\n}\n\nct = rbind.fill(out.list)\n\n# ---- Write core-transient summary table to file ----\n\nwrite.csv(ct, 'output/tabular_data/core-transient_summary.csv', row.names = F)\n\n#----------------------------------------------------------------------------------*\n# ---- Mode table ----\n#----------------------------------------------------------------------------------*\n# Input is the cut-ff for core- and transient designation and the number of reps\n# used to calculate the p-value. The proportional dataframe must be loaded into the\n# environment and the sampling summary code must be run prior to running this script.\n# WARNING: This takes a very long time to run!\n\nsite = factor(samplingSummary$site)\nthreshold = 1/3\nreps = 1000\n\nout.list = list()\n   \nfor (i in 1:length(site)){\n  tryCatch({\n  out.list[[i]] =  mode.summary(site[i], reps)\n  }, error = function(e){\n    cat('ERROR for site',site[i],':', conditionMessage(e), '\\n')\n  })\n}\n\nmodeSummary = rbind.fill(out.list)\n\nwrite.csv(modeSummary, 'output/tabular_data/ct_mode_summary.csv', row.names = F)\n\n#----------------------------------------------------------------------------------*\n# ----  Counting the number of individuals per site ----\n#==================================================================================*\n\n# Get summary table file and collect dataset names within the formatted dataset\n# directory:\n\nct = read.csv('output/tabular_data/core-transient_summary.csv')\n\nfilenames <- list.files('formatted_datasets', pattern=\"*.csv\", full.names=TRUE)\n  \n# Function to get the number of individuals for sites in a given dataset:\n  \ngetCounts = function(i){\n    d = read.csv(filenames[i])\n    if (names(d)[5] == 'density') names(d)[5] = 'count'\n    d = d[d$count > 0,]\n    out = ddply(d, .(site), summarize, nIndividuals = sum(count))\n    return(out)\n}\n\n# Function to calculate individuals per site across datasets:\n  \ncountsFun = function(){\n  outList = list()\n    for(i in 1:length(datasets)){\n        outList[[i]] = getCounts(i)\n    }\n  rbind.fill(outList)\n}\n  \n# Modify the ct table to include count-per-site data:\n  \nct = merge(ct, countsFun(), all = F)\n\n# Write modified core-transient summary table:\n  \nwrite.csv(ct, 'output/tabular_data/core-transient_summary.csv', row.names = F)\n\n#----------------------------------------------------------------------------------*\n# ----  Summarizing outputs with site as the sampling unit ----\n#==================================================================================*\n\nct = read.csv('output/tabular_data/core-transient_summary.csv')\n  \npropCoreSys = ddply(ct, .(system), summarize, \n                    meanPropCore = mean(prop.core), sePropCore = se(prop.core),\n                    meanPropTrans = mean(prop.trans), sePropTrans = se(prop.trans),\n                    meanMu = mean(mu), seMu = se(mu),\n                    meanBimodal = mean(bimodal), seBimodal = se(bimodal),\n                    meanAlpha = mean(alpha), seAlpha = se(alpha),\n                    meanBeta = mean(beta), seBeta = se(beta))\n\npropCoreTaxa = ddply(ct, .(taxa), summarize, \n                     meanPropCore = mean(prop.core), sePropCore = se(prop.core),\n                     meanPropTrans = mean(prop.trans), sePropTrans = se(prop.trans),\n                     meanMu = mean(mu), seMu = se(mu),\n                     meanBimodal = mean(bimodal), seBimodal = se(bimodal),\n                     meanAlpha = mean(alpha), seAlpha = se(alpha),\n                     meanBeta = mean(beta), seBeta = se(beta))\n\npropCoreSys = cbind(variable = rep('system', length(propCoreSys[,1])),\n                    group = propCoreSys[,1],\n                    propCoreSys[,2:length(propCoreSys)])\n\npropCoreTaxa = cbind(variable = rep('taxa', length(propCoreTaxa[,1])),\n                     group = propCoreTaxa[,1],\n                     propCoreTaxa[,2:length(propCoreTaxa)])\n\nsummary_SysTaxa = rbind(propCoreSys, propCoreTaxa)\n\nwrite.csv(rbind(propCoreSys, propCoreTaxa),\n          'output/tabular_data/summary_by_SysTaxa.csv', row.names = F)\n",
    "created" : 1424713285986.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1057954032",
    "id" : "1C175B7C",
    "lastKnownWriteTime" : 1425054368,
    "path" : "~/core-transient/scripts/R-scripts/output_tables.R",
    "project_path" : "scripts/R-scripts/output_tables.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}