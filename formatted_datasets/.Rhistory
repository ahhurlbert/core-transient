?dnorm
library(raster)
?idw
library(gstat)
??idw
install.packages(c('gstat','raster','dismo','maps'), dependencies = T)
install.packages(c("gstat", "raster", "dismo", "maps"), dependencies = T)
library(c(raster,dismo))
library(raster)
library(dismo)
library(gstat)
library(maps)
install.packages('gstat')
tmin = tempfile()
# Specify website:
ftp = 'ftp://prism.oregonstate.edu/daily/tmin/2014/PRISM_tmin_early_4kmD1_20140427_bil.zip'
# Download file:
download.file(ftp,tmin)
download.file(ftp,tmin)
?hist
tmin = tempfile()
# Specify website:
ftp = 'ftp://prism.oregonstate.edu/daily/tmin/2014/PRISM_tmin_early_4kmD1_20140427_bil.zip'
# Download file:
download.file(ftp,tmin)
library(gstat)
install.packages('gstat')
v1 = c(1:6)
# Type v1 in the space below to see the values you created.
# Tired of re-typing the name of the data to see the values? You could
# wrap the above in parentheses to run the function and view its
# output, as below.
(v1 = c(1:6))
v2A = rep('A',3)
v2B = rep('B',3)
v2 = c(v2A, v2B)
v2 = rep(c('A','B'), each = 3)
m = matrix(c(v1,v2), ncol = 2)
m
df1 = data.frame(v1,v2)
names(df1) = c('integer','factor')
df1
m
as.matrix(df1)
str(as.matrix(df1))
str(df1)
parabola = function(r,k,n) r*n*((k-n)/k)
r = .3
k = 100
n = 1:100
plot(parabola(r,k,n)~n, type = 'l', lwd = 3, ylim = c(-1,8),
xaxt = 'n', yaxt = 'n',bty = 'l',
xlab  = '',ylab = '')
title(ylab = expression(phi), line = 0.5, cex.lab = 3)
title(xlab = '% Impervious surface', line = 1, cex.lab = 2)
box (bty = 'l', lwd =3)
legend('topright','H1', bty = 'n', cex = 2)
(y = 8-.08*n)
plot(y~n, type = 'l', lwd = 3, ylim = c(-1,8),
xaxt = 'n', yaxt = 'n',bty = 'l',
xlab  = '',ylab = '')
title(ylab = expression(phi), line = 0.5, cex.lab = 3)
title(xlab = '% Impervious surface', line = 1, cex.lab = 2)
box (bty = 'l', lwd =3)
legend('topright','H2', bty = 'n', cex = 2)
plot(parabola(r,k,n)~n, type = 'l', lwd = 3, ylim = c(-1,8),
xaxt = 'n', yaxt = 'n',bty = 'l',
xlab  = '',ylab = '')
title(ylab = expression(phi), line = 0.5, cex.lab = 3)
title(xlab = '% Impervious surface', line = 1, cex.lab = 2)
box (bty = 'l', lwd =3)
legend('topright','H1', bty = 'n', cex = 2)
plot(parabola(r,k,n)~n, type = 'l', lwd = 3, ylim = c(-1,8),
xaxt = 'n', yaxt = 'n',bty = 'l',
xlab  = '',ylab = '')
title(ylab = expression(phi), line = 0.5, cex.lab = 3)
title(xlab = '% Impervious surface', line = 1, cex.lab = 2)
box (bty = 'l', lwd =3)
plot(parabola(r,k,n)~n, type = 'l', lwd = 3, ylim = c(-1,8),
xaxt = 'n', yaxt = 'n',bty = 'n',
xlab  = '',ylab = '')
title(ylab = expression(phi), line = 0.5, cex.lab = 3)
title(xlab = '% Impervious surface', line = 1, cex.lab = 2)
# Add a box around the plot:
box (bty = 'l', lwd =3)
legend('topright','H1', bty = 'n', cex = 2)
plot(y~n, type = 'l', lwd = 3, ylim = c(-1,8),
xaxt = 'n', yaxt = 'n',bty = 'l',
xlab  = '',ylab = '')
title(ylab = expression(phi), line = 0.5, cex.lab = 3)
title(xlab = '% Impervious surface', line = 1, cex.lab = 2)
box (bty = 'l', lwd =3)
legend('topright','H2', bty = 'n', cex = 2)
plot(y~n, type = 'l', lwd = 3, ylim = c(-1,8),
xaxt = 'n', yaxt = 'n',bty = 'n',
xlab  = '',ylab = '')
title(ylab = expression(phi), line = 0.5, cex.lab = 3)
title(xlab = '% Impervious surface', line = 1, cex.lab = 2)
box (bty = 'l', lwd =3)
legend('topright','H2', bty = 'n', cex = 2)
t1 =  c('A','A','A','B','A','A')
t2  = c(1,3,4,6,7,9)
t2 = data.frame(t1,t2)
df = data.frame(c('A','B','C'),c(1:3))
df
names(df) = c('birdID','someNumber')
df
generate.combos = function(df){
birdIDs = unique(df[,2])
bID_combo = expand.grid(birdIDs, birdIDs)
bID_combo[bID_combo[,2]>bID_combo[,1],]
}
bird.combos = generate.combos(df)
bird.combos
colors = c('A','BK','R')
colors = c('A','BK','R','-')
colors
expand.grid(colors)
expand.grid(colors,colors)
expand.grid(colors,colors,colors,colors)
c2 = data.frame()
setwd('/Users/bsevans/Desktop/core-transient-datasets/dataset_228RAW')
list.files()
hb = read.csv('hb_bird.txt')
mk = read.csv('mk_bird.txt')
rp = read.csv('rp_bird.txt')
sm = read.csv('sm_bird.txt')
head(sm)
test = melt(hb, id.vars = 'Bird.Species')
library(reshape2)
test = melt(hb, id.vars = 'Bird.Species')
test
head(hb)
test = melt(hb, id.vars = 'Bird.Species', TimeVar = 'Year')
test
hb
head(hb)
test = melt(hb, id.vars = 'Bird.Species', TimeVar = 'Year')
test
head(test)
hb = read.csv('hb_bird.txt', header = T)
head(hb)
hb = read.table('hb_bird.txt', header = T)
?read.table
hb = read.table('hb_bird.txt', sep = ',',header = T)
?read.csv
head(hb)
names(hb)
names(hb)[2:length(names(hb))] <- 1969:2010
head(hb)
test = melt(hb, id.vars = 'Bird.Species', TimeVar = 'Year')
test
head(test)
test = melt(hb, id.vars = 'Bird.Species', TimeVar = 'Year')
test = melt(mk, id.vars = 'Bird.Species', TimeVar = 'Year')
hb = read.csv('hb_bird.txt')
mk = read.csv('mk_bird.txt')
rp = read.csv('rp_bird.txt')
sm = read.csv('sm_bird.txt')
names(hb)[2:length(names(hb))] <- 1969:2010
# Files need to be reshaped from wide to long format prior to binding.
test = melt(hb, id.vars = 'Bird.Species')
test1 = melt(mk, id.vars = 'Bird.Species')
head(test1)
head(test)
test = melt(hb, id.vars = 'Bird.Species')
hb = read.csv('hb_bird.txt')
head(hb)
head(test)
str(test)
?gsub
head(hb)
gsub('X', '',names(hb))
names(hb) = gsub('X', '',names(hb))
head(hb)
head(hb[,2:length(names(hb))])
test = gsub('t',0,hb[,2:length(names(hb))])
head(test)
hb[hb %in% "t"] <- "b"
head(hb)
names(test)
test = melt(hb, id.vars = 'Bird.Species')
names(test)
head(test)
test$value = factor(test$value)
summary(test)
unique(test$Bird.Species)
test = test[test$Bird.Species!='Total (all Species)' &
test$Bird.Species!= 'Number of Species',]
unique(test$Bird.Species)
test = test[test$Bird.Species!='Total  (all Species)' &
test$Bird.Species!= 'Number of Species',]
unique(test$Bird.Species)
head(test)
test = test[test$value>0,]
names(test) = c('species','year','count')
names(hb) = gsub('X', '',names(hb))
test = melt(hb, id.vars = 'Bird.Species')
names(test) = c('species','year','count')
test = test[test$species!='Total  (all Species)' &
test$species!= 'Number of Species',]
head(test)
test$count = gsub('t', 0, test$count)
summary(test)
test$count = numeric(gsub('t', 0, test$count))
test$count = as.numeric(gsub('t', 0, test$count))
test$count = factor(gsub('t', 0, test$count))
summary(test)
test = melt(hb, id.vars = 'Bird.Species')
names(test) = c('species','year','count')
test = test[test$species!='Total  (all Species)' &
test$species!= 'Number of Species',]
test$count = factor(test$count)
summary(test)
test$count = factor(gsub('t', 0, test$count))
summary(test)
unique(test$count)
test$count = factor(gsub('r', '', test$count))
unique(test$count)
test$count = numeric(factor(gsub('r', '', test$count)))
test$count = as.numeric(factor(gsub('r', '', test$count)))
head(test$count)
head(test)
head(hb)
head(test)
test = melt(hb, id.vars = 'Bird.Species')
head(test)
test = melt(hb, id.vars = 'Bird.Species')
names(test) = c('species','year','count')
test = test[test$species!='Total  (all Species)' &
test$species!= 'Number of Species',]
test$count = factor(gsub('t', 0, test$count))
test$count = as.numeric(as.factor(gsub('r', '', test$count)))
head(test)
test$count = as.numeric(as.character(gsub('r', '', test$count)))
head(test)
names(hb) = gsub('X', '',names(hb))
test = melt(hb, id.vars = 'Bird.Species')
names(test) = c('species','year','count')
test = test[test$species!='Total  (all Species)' &
test$species!= 'Number of Species',]
test$count = factor(gsub('t', 0, test$count))
test$count = as.numeric(gsub('r', '', test$count))
head(test)
str(test)
head(test)
test = melt(hb, id.vars = 'Bird.Species')
names(test) = c('species','year','count')
test = test[test$species!='Total  (all Species)' &
test$species!= 'Number of Species',]
test$count = factor(gsub('t', 0, test$count))
test$count = gsub('r', '', test$count)
test$count = as.numeric(test$count)
head(test)
test$count = test$count[test$count>0]
test$count = test[test$count>0,]
test = test[test$count>0,]
head(test)
summary(test)
t1 = as.numeric(test$year)
summary(t1)
t1 = as.numeric(levels(test$year))
summary(t1)
length(t1)
length(test$count)
t1 = as.numeric(levels(test$year))[as.integer(test$year)]
length(t1)
test$year = as.numeric(levels(test$year))[as.integer(test$year)]
head(test)
str(test)
head(test)
reshape.fun = function(sampling.site, site.code){
names(sampling.site) = gsub('X', '',names(sampling.site))
test = melt(hb, id.vars = 'Bird.Species')
names(test) = c('species','year','count')
test = test[test$species!='Total  (all Species)' &
test$species!= 'Number of Species',]
test$count = factor(gsub('t', 0, test$count))
test$count = gsub('r', '', test$count)
test$count = as.numeric(test$count)
test$year = as.numeric(levels(test$year))[as.integer(test$year)]
test$site = rep(site.code, length(test$year))
test = test[test$count>0,]
test = test[,c(4,1:3)]
test
}
reshape.fun(hb,'hb')
rbind(reshape.fun(hb,'hb'),reshape.fun(mk,'mk'),
reshape.fun(rp,'rp'),reshape.fun(sm,'sm'))
reshape.fun(rp,'rp')
t1 = rbind(reshape.fun(hb,'hb'),reshape.fun(mk,'mk'),
reshape.fun(rp,'rp'),reshape.fun(sm,'sm'))
summary(t1)
reshape.fun = function(sampling.site, site.code){
names(sampling.site) = gsub('X', '',names(sampling.site))
test = melt(hb, id.vars = 'Bird.Species')
names(test) = c('species','year','count')
test = test[test$species!='Total  (all Species)' &
test$species!= 'Number of Species',]
test$count = factor(gsub('t', 0, test$count))
test$count = gsub('r', '', test$count)
test$count = as.numeric(test$count)
test$year = as.numeric(levels(test$year))[as.integer(test$year)]
test$site = factor(rep(site.code, length(test$year)))
test = test[test$count>0,]
test = test[,c(4,1:3)]
test
}
t1 = rbind(reshape.fun(hb,'hb'),reshape.fun(mk,'mk'),
reshape.fun(rp,'rp'),reshape.fun(sm,'sm'))
summary(t1)
reshape.fun = function(sampling.site, site.code){
# Remove X's from the year column:
names(sampling.site) = gsub('X', '',names(sampling.site))
# Melt from wide to long format:
dClean = melt(hb, id.vars = 'Bird.Species')
# Set column names:
names(dClean) = c('species','year','count')
# Remove rows of summary data:
dClean = dClean[dClean$species!='Total  (all Species)' &
dClean$species!= 'Number of Species',]
# Replace "t" (trace?) values with 0's:
dClean$count = factor(gsub('t', 0, dClean$count))
# There is some r's in there connected with numbers, remove them:
dClean$count = gsub('r', '', dClean$count)
# Convert count and year data to numeric:
dClean$count = as.numeric(dClean$count)
dClean$year = as.numeric(levels(dClean$year))[as.integer(dClean$year)]
# Add a site column (and arrange as the first column):
dClean$site = factor(rep(site.code, length(dClean$year)))
dClean = dClean[,c(4,1:3)]
# Remove 0's:
dClean = dClean[dClean$count>0,]
dClean
}
t1 = rbind(reshape.fun(hb,'hb'),reshape.fun(mk,'mk'),
reshape.fun(rp,'rp'),reshape.fun(sm,'sm'))
head(t1)
tail(t1)
d228 = rbind(reshape.fun(hb,'hb'),reshape.fun(mk,'mk'),
reshape.fun(rp,'rp'),reshape.fun(sm,'sm'))
setwd('/Users/bsevans/Desktop/core-transient-datasets')
write.csv(d228, 'd228.csv', row.names = F)
write.csv(d228, 'dataset_228.csv', row.names = F)
setwd('/Users/bsevans/Desktop/core-transient-datasets/raw_datasets/dataset_228RAW')
list.files()
reshape.fun = function(sampling.site, site.code){
# Remove X's from the year column:
names(sampling.site) = gsub('X', '',names(sampling.site))
# Melt from wide to long format:
dClean = melt(hb, id.vars = 'Bird.Species')
# Set column names:
names(dClean) = c('species','year','count')
# Remove rows of summary data:
dClean = dClean[dClean$species!='Total  (all Species)' &
dClean$species!= 'Number of Species',]
# Replace "t" (trace?) values with 0's:
dClean$count = factor(gsub('t', 0, dClean$count))
# There is some r's in there connected with numbers, remove them:
dClean$count = gsub('r', '', dClean$count)
# Convert count and year data to numeric:
dClean$count = as.numeric(dClean$count)
dClean$year = as.numeric(levels(dClean$year))[as.integer(dClean$year)]
# Add a site column (and arrange as the first column):
site.name = paste('d228',site.code, sep ='_')
dClean$site = factor(rep(site.name, length(dClean$year)))
dClean = dClean[,c(4,1:3)]
# Remove 0's:
dClean = dClean[dClean$count>0,]
dClean
}
d228 = rbind(reshape.fun(hb,'hb'),reshape.fun(mk,'mk'),
reshape.fun(rp,'rp'),reshape.fun(sm,'sm'))
head(d228)
setwd('/Users/bsevans/Desktop/core-transient-datasets/formatted_datasets')
write.csv(d228, 'dataset_228.csv', row.names = F)
setwd('/Users/bsevans/Desktop/core-transient-datasets/raw_datasets')
list.files()
d226 = read.csv('dataset_226.csv')
head(d226)
reshape.fun = function(sampling.site, site.code){
# Remove X's from the year column:
names(sampling.site) = gsub('X', '',names(sampling.site))
# Melt from wide to long format:
dClean = melt(sampling.site, id.vars = 'Bird.Species')
# Set column names:
names(dClean) = c('species','year','count')
# Remove rows of summary data:
dClean = dClean[dClean$species!='Total  (all Species)' &
dClean$species!= 'Number of Species',]
# Replace "t" (trace?) values with 0's:
dClean$count = factor(gsub('t', 0, dClean$count))
# There is some r's in there connected with numbers, remove them:
dClean$count = gsub('r', '', dClean$count)
# Convert count and year data to numeric:
dClean$count = as.numeric(dClean$count)
dClean$year = as.numeric(levels(dClean$year))[as.integer(dClean$year)]
# Add a site column (and arrange as the first column):
site.name = paste('d228',site.code, sep ='_')
dClean$site = factor(rep(site.name, length(dClean$year)))
dClean = dClean[,c(4,1:3)]
# Remove 0's:
dClean = dClean[dClean$count>0,]
dClean
}
d228 = rbind(reshape.fun(hb,'hb'),reshape.fun(mk,'mk'),
reshape.fun(rp,'rp'),reshape.fun(sm,'sm'))
setwd('/Users/bsevans/Desktop/core-transient-datasets/formatted_datasets')
write.csv(d228, 'dataset_228.csv', row.names = F)
head(d228)
summary(d228)
names(d226) = gsub('X', '',names(sampling.site))
names(d226) = gsub('X', '',names(d226))
head(d226)
dClean = melt(hb, id.vars = 'Species')
dClean = melt(d226, id.vars = 'Species')
head(dClean)
names(dClean) = c('species','year','count')
summary(dClean)
unique(dClean$species)
# Add a site column (and arrange as the first column):
dClean$site = factor(rep('d226_ew', length(dClean$year)))
dClean = dClean[,c(4,1:3)]
# Remove 0's:
dClean = dClean[dClean$count>0,]
dClean$year = as.numeric(levels(dClean$year))[as.integer(dClean$year)]
dClean$site = factor(rep('d226_ew', length(dClean$year)))
dClean = dClean[,c(4,1:3)]
# Remove 0's:
dClean = dClean[dClean$count>0,]
summary(dClean)
dClean = na.omit(dClean)
summary(dClean)
reshape.fun = function(sampling.site, site.code){
# Remove X's from the year column:
names(sampling.site) = gsub('X', '',names(sampling.site))
# Melt from wide to long format:
dClean = melt(sampling.site, id.vars = 'Bird.Species')
# Set column names:
names(dClean) = c('species','year','count')
# Remove rows of summary data:
dClean = dClean[dClean$species!='Total  (all Species)' &
dClean$species!= 'Number of Species',]
# Replace "t" (trace?) values with 0's:
dClean$count = factor(gsub('t', 0, dClean$count))
# There is some r's in there connected with numbers, remove them:
dClean$count = gsub('r', '', dClean$count)
# Convert count and year data to numeric:
dClean$count = as.numeric(dClean$count)
dClean$year = as.numeric(levels(dClean$year))[as.integer(dClean$year)]
# Add a site column (and arrange as the first column):
site.name = paste('d228',site.code, sep ='_')
dClean$site = factor(rep(site.name, length(dClean$year)))
dClean = dClean[,c(4,1:3)]
# Remove 0's:
dClean = dClean[dClean$count>0,]
# Remove NA's:
dClean = na.omit(dClean)
dClean
}
d228 = rbind(reshape.fun(hb,'hb'),reshape.fun(mk,'mk'),
reshape.fun(rp,'rp'),reshape.fun(sm,'sm'))
setwd('/Users/bsevans/Desktop/core-transient-datasets/formatted_datasets')
write.csv(d228, 'dataset_228.csv', row.names = F)
summary(d228)
summary(dClean)
d226 = dClean[dClean$count>0,]
setwd('/Users/bsevans/Desktop/core-transient-datasets/formatted_datasets')
write.csv(d226, 'dataset_226.csv', row.names = F)
d226
head(d226)
d226 = read.csv('dataset_226.csv')
# Remove X's from the year column:
names(d226) = gsub('X', '',names(d226))
# Melt from wide to long format:
dClean = melt(d226, id.vars = 'Species')
# Set column names:
names(dClean) = c('species','year','count')
# Convert year data to numeric:
dClean$year = as.numeric(levels(dClean$year))[as.integer(dClean$year)]
# Add a site column (and arrange as the first column):
dClean$site = factor(rep('d226_ew', length(dClean$year)))
setwd('/Users/bsevans/Desktop/core-transient-datasets/raw_datasets')
d226 = read.csv('dataset_226.csv')
# Remove X's from the year column:
names(d226) = gsub('X', '',names(d226))
# Melt from wide to long format:
dClean = melt(d226, id.vars = 'Species')
# Set column names:
names(dClean) = c('species','year','count')
# Convert year data to numeric:
dClean$year = as.numeric(levels(dClean$year))[as.integer(dClean$year)]
# Add a site column (and arrange as the first column):
dClean$site = factor(rep('d226_ew', length(dClean$year)))
dClean = dClean[,c(4,1:3)]
# Remove NA's:
dClean = na.omit(dClean)
d226 = dClean[dClean$count>0,]
head(d226)
setwd('/Users/bsevans/Desktop/core-transient-datasets/formatted_datasets')
write.csv(d226, 'dataset_226.csv', row.names = F)
head(d226)
